[
    {
        "label": "EmailService",
        "importPath": "mail.tasks",
        "description": "mail.tasks",
        "isExtraImport": true,
        "detail": "mail.tasks",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "notification_factory",
        "kind": 2,
        "importPath": "tasks.helper",
        "description": "tasks.helper",
        "peekOfCode": "def notification_factory(task):\n    \"\"\"\n    Factory function to return the appropriate notification callable or service object.\n    \"\"\"\n    if task.type == \"email\":\n        email_service = EmailService()\n        email_task_mapping = {\n            \"account approval\": email_service.accountApprovalAndApproved,\n            \"account approved\": email_service.accountApprovalAndApproved,\n            \"create ticket\": email_service.sendFlightTicket,",
        "detail": "tasks.helper",
        "documentation": {}
    },
    {
        "label": "process_task",
        "kind": 2,
        "importPath": "tasks.helper",
        "description": "tasks.helper",
        "peekOfCode": "def process_task():\n    tasks = NotificationTask.objects.filter(retry__lt=10).exclude(status='sent')\n    print(\"coming here\")\n    for task in tasks:\n        try:\n            # Get the notification callable\n            notification_callable = notification_factory(task)\n            print(\"line 20\", task)\n            # Call the notification function with the task\n            status = notification_callable(task)  # Pass the task as an argument",
        "detail": "tasks.helper",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tasks.helper",
        "description": "tasks.helper",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef notification_factory(task):\n    \"\"\"\n    Factory function to return the appropriate notification callable or service object.\n    \"\"\"\n    if task.type == \"email\":\n        email_service = EmailService()\n        email_task_mapping = {\n            \"account approval\": email_service.accountApprovalAndApproved,\n            \"account approved\": email_service.accountApprovalAndApproved,",
        "detail": "tasks.helper",
        "documentation": {}
    }
]